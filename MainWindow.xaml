<Window x:Class="SystemOnChip.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SystemOnChip"
        mc:Ignorable="d"
        Title="Computer Systems and SoC" Height="707.43" Width="1380.947" MaxWidth="1380" MaxHeight="708">
    <Grid Margin="0,0,7,0">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="171*"/>
            <ColumnDefinition Width="529*"/>
        </Grid.ColumnDefinitions>
        <Grid.Background>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="Black" Offset="0"/>
                <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
            </LinearGradientBrush>
        </Grid.Background>
        <RichTextBox HorizontalAlignment="Left" Height="610" Margin="6,6,0,0" VerticalAlignment="Top" Width="718" TextChanged="RichTextBox_TextChanged" Grid.ColumnSpan="2">
            <FlowDocument>
                <Paragraph>
                    <Run FontWeight="Bold" Text="System Architecture"/>
                    <Run Text=" :  It defines the system level building blocks such as processors, memories and the interconnection between them. The implementation of the processor is known as micro architecture.   In addition to basic components it can contain analog circuitry for managing sensor data and analog to digital conversion.  A decision in SoC design is to select which components in the system are to be implemented in hardware and which in software. "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="Simple Sequential Processor: "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text="Sequential processors implement sequential execution model hence IF (fetching the instruction), ID (decoding the opcode), AG (generating the address in memory of any data item residing there, DF (fetching data operands into executable registers), EX (executing the specified operation) and WB ( write back the result to the register file)."/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text=" Pipelined Processor: "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text=" "/>
                    <Run Text="Utilizing"/>
                    <Run Text=" a pipelined approach. At any given time, there is an active operation in each phase (IF, ID, AG,DF, EX). Static pipeline requires the processor to go through all the phases whether the instruction requires it or not and dynamic pipeline allows the bypassing of one or more pipeline stages depending on the requirements of the instruction. "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="A soft processor "/>
                    <Run Text=" "/>
                    <Run Text="is implemented with FPGAs or similar reconfigurable technology, examples include Xilinx MicroBlaze, Altera Nios II fast, ARC 600, Tensilica Xtensa LX and Cambridge XAP3a. "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="Instruction Level Parallelism:   "/>
                    <Run Text=" "/>
                    <Run Text="Each instruction consists of a single operation. eg. "/>
                    <Run Text=" "/>
                    <Run FontStyle="Italic" Text="Superscalar "/>
                    <Run Text=" "/>
                    <Run Text="and "/>
                    <Run Text=" "/>
                    <Run FontStyle="Italic" Text="VLIW "/>
                    <Run Text=" "/>
                    <Run Text="processor.  A superscalar processor dynamically analysis the instruction stream to determine which operations are independent and can be executed.  Note, different from the dynamic pipelined processor which is limited to executing a single operation per cycle by virtue of their scalar nature. The "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="superscalar processor "/>
                    <Run Text=" "/>
                    <Run Text="can achieve execution rates of several instructions (4 to 6)  per cycle. This is achieved with the help of multiple functional units and a dynamic scheduler to process more than one instruction per cycle. Examples include MIPS74K core, Infineon TriCore2 and Freescale e600.  A "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="VLIW processor"/>
                    <Run Text=" "/>
                    <Run Text=" relies on the compiler to analyze the available operations (OP) and hence schedules independent operations into wide instruction words which then executes these operations in parallel with no further analysis.  It is unable to take advantage of any dynamic execution characteristics,  for applications that can be scheduled statically to use the processor resources effectively a simple VLIW implementation results in high performance.   Performance hits include data cache miss, delayed results from operations whose latency differs from the assumed latency scheduled by the compiler and interruptions from exceptions or interrupts which changes the execution path. Examples include Fujitsu MB93555A, TI TMS320C671B, CEVA-X1620, Philips Nexperia PNX1700. The SIMD class of processor architectures include both array and vector processors. It utilizes regular data structures such as vectors and matrices. The two popular types of SIMD processor are the array processor and the vector processor.  "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="Array processor:  "/>
                    <Run Text=" "/>
                    <Run Text="The array processor is a set of parallel processors connected through networks.  These processors operation in lockstep in response to a single broadcast instruction from the controller processor. Each processor has it's own memory. Hence data distribution needs to be managed. Examples of array based processors are ClearSpeed CSX600 (96 processors per control unit), Atsana J2211 (configurable) Xelerator X10q (200 processors per control unit).  SoC examples  using vector processor on devices Freescale e600, Motorola RSVP and ARM VFP11.  "/>
                    <Run Text=" "/>
                    <Run FontWeight="Bold" Text="Multiprocessors : "/>
                    <Run Text=" "/>
                    <Run Text="  In this configuration each processor executes  completely independently (with synchronization) . They share memory and execute separate program tasks, hence the implementation is more complex compared to the array processor. Most processor elements are identical. Examples of SoC multiprocessors include Machanick, IBM Cell, Philips PNX8500 and Lehtoranta.   The interconnection network in the multiprocessor passes data between processor elements and synchronizes the independent execution streams between processor elements, hence synchronization is required across the various processor elements. The first problem is maintaining memory consistency between processor elements and within a processor element, this can be solved by a combination of hardware and software techniques. The second is cache coherency to ensure that all processor elements see the same value for a given memory location.   The primary characteristic of a multiprocessor systems is the memory address space.  Hence the implementation of shared memory machine is more difficult than the implementation of the distributed memory machine."/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <Label Content="Reference: Computer System Design: System On Chip - Michael J Flynn and Wayne Luk, 2011" HorizontalAlignment="Left" Margin="4,640,0,0" VerticalAlignment="Top" Width="498" Grid.ColumnSpan="2"/>
        <Label Content="Reference: System on Chip Test Architectures, Laung-Terng Wang, Charles Stroud, Nur Touba" HorizontalAlignment="Left" Margin="8,621,0,0" VerticalAlignment="Top" Width="503" Grid.ColumnSpan="2"/>
        <Label Content="Reference: System-on-chip Next Generation Electronics, Bashir M Al-Hashimi 2006" HorizontalAlignment="Right" Margin="0,638,414,0" VerticalAlignment="Top" Width="446" Grid.Column="1" Height="24"/>
        <Button x:Name="Interconnect" Content="Interconnect" Grid.Column="1" HorizontalAlignment="Left" Margin="661,575,0,0" VerticalAlignment="Top" Width="90" RenderTransformOrigin="-2.427,0.05" Click="Interconnect_Click" Height="33"/>
        <Button x:Name="SoC_Customization" Content="SoC Customization" Grid.Column="1" HorizontalAlignment="Left" Margin="422,574,0,0" VerticalAlignment="Top" Width="112" Height="35" Click="SoC_Customization_Click"/>
        <Button x:Name="Memory_Addressing" Content="Memory_Addressing" Grid.Column="1" HorizontalAlignment="Left" Margin="540,573,0,0" VerticalAlignment="Top" Width="115" Height="34" Click="Memory_Addressing_Click"/>
        <Image Grid.Column="1" HorizontalAlignment="Left" Height="235" Margin="400,10,0,0" VerticalAlignment="Top" Width="382" Source="Image5.png"/>
        <Image Grid.Column="1" HorizontalAlignment="Left" Height="183" Margin="400,253,0,0" VerticalAlignment="Top" Width="376" Source="Image4.png"/>
        <RichTextBox Grid.Column="1" HorizontalAlignment="Left" Height="137" Margin="400,432,0,0" VerticalAlignment="Top" Width="377">
            <FlowDocument>
                <Paragraph>
                    <Run Text="Embedded Systems: One of the major applications of retargetable compilers in SoC design is to support the design and programming of application specific instruction set processors (ASIPs). The Tensilica Xtensa is a well known industrial ASIP, it provides a RISC core that can be extended and customized by adding new machine instructions and adjusting parameters e.g the memory and register file sizes. LISATek is another ASIP that uses the LISA 2.0 (language for instruction set architectures) for processor modeling."/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <RichTextBox Grid.Column="1" HorizontalAlignment="Left" Height="550" Margin="789,13,0,0" VerticalAlignment="Top" Width="237" TextChanged="RichTextBox_TextChanged_2">
            <FlowDocument>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Left">
                    <Run FontWeight="Bold" Text="Design for testability "/>
                    <Run Text=" "/>
                    <Run Text=" DFT is essential for VLSI ckt.  Popular techniques include scan and scan based logic build in self test (BIST) . Testing the interconnection of the SoC called the NoC is challenging and new test methods are required.    Techniques include wrapper design, test access mechanism optimization, test scheduling and applications to mixed signal and hierarchical SoCs. "/>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Left"/>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Run FontWeight="Bold" FontFamily="Calibri" Text="SiP"/>
                    <Run FontFamily="Calibri" Text=" has the benefit of product cost. It"/>
                    <Run Text=" "/>
                    <Span FontFamily="Calibri">
                        <Run Text="'"/>
                    </Span>
                    <Run Text=" "/>
                    <Span FontFamily="Calibri">
                        <Run Text="s less design effort to integrate existing and available IC into a SiP then creating a new SoC even with existing IP cores.  A MCM , multichip module integrates several active dies to one common substrate, integration includes memories and a processor, however it has limited capabilities. SiP includes system integration benefits including in package by pass capacitors"/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Run FontWeight="Bold" FontFamily="Calibri"/>
                </Paragraph>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Run FontWeight="Bold" FontFamily="Calibri" Text="MEMs Testing:  "/>
                    <Run FontFamily="Calibri" Text="MEMs devices are miniature electromechanical sensors and actuators that are fabricate using VLSI technology. They can sense, control and actuate on a microscale and function with other devices or individually to create macroscale effects."/>
                </Paragraph>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Span FontFamily="Calibri">
                        <Run/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Run FontWeight="Bold" FontFamily="Calibri" Text="Design for manufacturability (DFM) and Yield"/>
                    <Run FontFamily="Calibri" Text=":  DFM is focused on layout design changes to improve manufacturability form mask making to lithography and chemical mechanical processing (CMP). "/>
                </Paragraph>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Run FontFamily="Calibri"/>
                </Paragraph>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Run FontWeight="Bold" FontFamily="Calibri" Text="Design for yield (DFY) :  "/>
                    <Run FontFamily="Calibri" Text="Design for yield utilizes various techniques targeted to improve manufacturing yield of the SoC."/>
                </Paragraph>
                <Paragraph FontFamily="Times New Roman" Margin="0" TextAlignment="Left">
                    <Run FontFamily="Calibri"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=""/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>

    </Grid>
</Window>
